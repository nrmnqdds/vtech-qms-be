// Code generated by mockery v2.49.1. DO NOT EDIT.

package store

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateUserParams) (int32, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateUserParams) int32); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockQuerier_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CreateUserParams
func (_e *MockQuerier_Expecter) CreateUser(ctx interface{}, arg interface{}) *MockQuerier_CreateUser_Call {
	return &MockQuerier_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *MockQuerier_CreateUser_Call) Run(run func(ctx context.Context, arg CreateUserParams)) *MockQuerier_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateUserParams))
	})
	return _c
}

func (_c *MockQuerier_CreateUser_Call) Return(_a0 int32, _a1 error) *MockQuerier_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateUser_Call) RunAndReturn(run func(context.Context, CreateUserParams) (int32, error)) *MockQuerier_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields: ctx
func (_m *MockQuerier) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []GetAllUsersRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]GetAllUsersRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []GetAllUsersRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GetAllUsersRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockQuerier_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetAllUsers(ctx interface{}) *MockQuerier_GetAllUsers_Call {
	return &MockQuerier_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", ctx)}
}

func (_c *MockQuerier_GetAllUsers_Call) Run(run func(ctx context.Context)) *MockQuerier_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_GetAllUsers_Call) Return(_a0 []GetAllUsersRow, _a1 error) *MockQuerier_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetAllUsers_Call) RunAndReturn(run func(context.Context) ([]GetAllUsersRow, error)) *MockQuerier_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// SeedRoles provides a mock function with given fields: ctx
func (_m *MockQuerier) SeedRoles(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SeedRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_SeedRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SeedRoles'
type MockQuerier_SeedRoles_Call struct {
	*mock.Call
}

// SeedRoles is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) SeedRoles(ctx interface{}) *MockQuerier_SeedRoles_Call {
	return &MockQuerier_SeedRoles_Call{Call: _e.mock.On("SeedRoles", ctx)}
}

func (_c *MockQuerier_SeedRoles_Call) Run(run func(ctx context.Context)) *MockQuerier_SeedRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_SeedRoles_Call) Return(_a0 error) *MockQuerier_SeedRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_SeedRoles_Call) RunAndReturn(run func(context.Context) error) *MockQuerier_SeedRoles_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
