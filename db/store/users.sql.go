// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    Users (
        id,
        username,
        email,
        role_id,
        last_login,
        is_active
    )
VALUES
    (
        -- autoincrement id starting from 1
        -- (
        --     SELECT
        --         COALESCE(MAX(id), 0) + 1
        --     FROM
        --         Users
        -- ),
        $1,
        $2,
        $3,
        (
            SELECT
                id
            FROM
                UserRoles
            WHERE
                role_name = $4
        ),
        CURRENT_TIMESTAMP,
        TRUE
    )
RETURNING
    id
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Role     string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Role,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT
    u.id,
    u.username,
    u.email,
    r.role_name AS role,
    u.last_login,
    u.is_active
FROM
    Users u
    JOIN UserRoles r ON u.role_id = r.id
`

type GetAllUsersRow struct {
	ID        string           `json:"id"`
	Username  string           `json:"username"`
	Email     string           `json:"email"`
	Role      string           `json:"role"`
	LastLogin pgtype.Timestamp `json:"last_login"`
	IsActive  pgtype.Bool      `json:"is_active"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUsersRow{}
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Role,
			&i.LastLogin,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const seedRoles = `-- name: SeedRoles :exec
INSERT INTO
    UserRoles (id, role_name, description)
VALUES
    (
        1,
        'admin',
        'System administrator with full access'
    ),
    (
        2,
        'quality_manager',
        'Manages quality processes'
    ),
    (
        3,
        'auditor',
        'Performs internal and external audits'
    ),
    (4, 'staff', 'Standard user with limited access')
`

func (q *Queries) SeedRoles(ctx context.Context) error {
	_, err := q.db.Exec(ctx, seedRoles)
	return err
}
